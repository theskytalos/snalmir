const KEY_TABLE = [
    0x84, 0x87, 0x37, 0xD7, 0xEA, 0x79, 0x91, 0x7D, 0x4B, 0x4B, 0x85, 0x7D, 0x87, 0x81, 0x91, 0x7C,
    0x0F, 0x73, 0x91, 0x91, 0x87, 0x7D, 0x0D, 0x7D, 0x86, 0x8F, 0x73, 0x0F, 0xE1, 0xDD, 0x85, 0x7D,
    0x05, 0x7D, 0x85, 0x83, 0x87, 0x9C, 0x85, 0x33, 0x0D, 0xE2, 0x87, 0x19, 0x0F, 0x79, 0x85, 0x86,
    0x37, 0x7D, 0xD7, 0xDD, 0xE9, 0x7D, 0xD7, 0x7D, 0x85, 0x79, 0x05, 0x7D, 0x0F, 0xE1, 0x87, 0x7E,
    0x23, 0x87, 0xF5, 0x79, 0x5F, 0xE3, 0x4B, 0x83, 0xA3, 0xA2, 0xAE, 0x0E, 0x14, 0x7D, 0xDE, 0x7E,
    0x85, 0x7A, 0x85, 0xAF, 0xCD, 0x7D, 0x87, 0xA5, 0x87, 0x7D, 0xE1, 0x7D, 0x88, 0x7D, 0x15, 0x91,
    0x23, 0x7D, 0x87, 0x7C, 0x0D, 0x7A, 0x85, 0x87, 0x17, 0x7C, 0x85, 0x7D, 0xAC, 0x80, 0xBB, 0x79,
    0x84, 0x9B, 0x5B, 0xA5, 0xD7, 0x8F, 0x05, 0x0F, 0x85, 0x7E, 0x85, 0x80, 0x85, 0x98, 0xF5, 0x9D,
    0xA3, 0x1A, 0x0D, 0x19, 0x87, 0x7C, 0x85, 0x7D, 0x84, 0x7D, 0x85, 0x7E, 0xE7, 0x97, 0x0D, 0x0F,
    0x85, 0x7B, 0xEA, 0x7D, 0xAD, 0x80, 0xAD, 0x7D, 0xB7, 0xAF, 0x0D, 0x7D, 0xE9, 0x3D, 0x85, 0x7D,
    0x87, 0xB7, 0x23, 0x7D, 0xE7, 0xB7, 0xA3, 0x0C, 0x87, 0x7E, 0x85, 0xA5, 0x7D, 0x76, 0x35, 0xB9,
    0x0D, 0x6F, 0x23, 0x7D, 0x87, 0x9B, 0x85, 0x0C, 0xE1, 0xA1, 0x0D, 0x7F, 0x87, 0x7D, 0x84, 0x7A,
    0x84, 0x7B, 0xE1, 0x86, 0xE8, 0x6F, 0xD1, 0x79, 0x85, 0x19, 0x53, 0x95, 0xC3, 0x47, 0x19, 0x7D,
    0xE7, 0x0C, 0x37, 0x7C, 0x23, 0x7D, 0x85, 0x7D, 0x4B, 0x79, 0x21, 0xA5, 0x87, 0x7D, 0x19, 0x7D,
    0x0D, 0x7D, 0x15, 0x91, 0x23, 0x7D, 0x87, 0x7C, 0x85, 0x7A, 0x85, 0xAF, 0xCD, 0x7D, 0x87, 0x7D,
    0xE9, 0x3D, 0x85, 0x7D, 0x15, 0x79, 0x85, 0x7D, 0xC1, 0x7B, 0xEA, 0x7D, 0xB7, 0x7D, 0x85, 0x7D,
    0x85, 0x7D, 0x0D, 0x7D, 0xE9, 0x73, 0x85, 0x79, 0x05, 0x7D, 0xD7, 0x7D, 0x85, 0xE1, 0xB9, 0xE1,
    0x0F, 0x65, 0x85, 0x86, 0x2D, 0x7D, 0xD7, 0xDD, 0xA3, 0x8E, 0xE6, 0x7D, 0xDE, 0x7E, 0xAE, 0x0E,
    0x0F, 0xE1, 0x89, 0x7E, 0x23, 0x7D, 0xF5, 0x79, 0x23, 0xE1, 0x4B, 0x83, 0x0C, 0x0F, 0x85, 0x7B,
    0x85, 0x7E, 0x8F, 0x80, 0x85, 0x98, 0xF5, 0x7A, 0x85, 0x1A, 0x0D, 0xE1, 0x0F, 0x7C, 0x89, 0x0C,
    0x85, 0x0B, 0x23, 0x69, 0x87, 0x7B, 0x23, 0x0C, 0x1F, 0xB7, 0x21, 0x7A, 0x88, 0x7E, 0x8F, 0xA5,
    0x7D, 0x80, 0xB7, 0xB9, 0x18, 0xBF, 0x4B, 0x19, 0x85, 0xA5, 0x91, 0x80, 0x87, 0x81, 0x87, 0x7C,
    0x0F, 0x73, 0x91, 0x91, 0x84, 0x87, 0x37, 0xD7, 0x86, 0x79, 0xE1, 0xDD, 0x85, 0x7A, 0x73, 0x9B,
    0x05, 0x7D, 0x0D, 0x83, 0x87, 0x9C, 0x85, 0x33, 0x87, 0x7D, 0x85, 0x0F, 0x87, 0x7D, 0x0D, 0x7D,
    0xF6, 0x7E, 0x87, 0x7D, 0x88, 0x19, 0x89, 0xF5, 0xD1, 0xDD, 0x85, 0x7D, 0x8B, 0xC3, 0xEA, 0x7A,
    0xD7, 0xB0, 0x0D, 0x7D, 0x87, 0xA5, 0x87, 0x7C, 0x73, 0x7E, 0x7D, 0x86, 0x87, 0x23, 0x85, 0x10,
    0xD7, 0xDF, 0xED, 0xA5, 0xE1, 0x7A, 0x85, 0x23, 0xEA, 0x7E, 0x85, 0x98, 0xAD, 0x79, 0x86, 0x7D,
    0x85, 0x7D, 0xD7, 0x7D, 0xE1, 0x7A, 0xF5, 0x7D, 0x85, 0xB0, 0x2B, 0x37, 0xE1, 0x7A, 0x87, 0x79,
    0x84, 0x7D, 0x73, 0x73, 0x87, 0x7D, 0x23, 0x7D, 0xE9, 0x7D, 0x85, 0x7E, 0x02, 0x7D, 0xDD, 0x2D,
    0x87, 0x79, 0xE7, 0x79, 0xAD, 0x7C, 0x23, 0xDA, 0x87, 0x0D, 0x0D, 0x7B, 0xE7, 0x79, 0x9B, 0x7D,
    0xD7, 0x8F, 0x05, 0x7D, 0x0D, 0x34, 0x8F, 0x7D, 0xAD, 0x87, 0xE9, 0x7C, 0x85, 0x80, 0x85, 0x79,
    0x8A, 0xC3, 0xE7, 0xA5, 0xE8, 0x6B, 0x0D, 0x74, 0x10, 0x73, 0x33, 0x17, 0x0D, 0x37, 0x21, 0x19
]

exports.encrypt = (packetBuffer) => {
    let checksumEnc = 0, checksumDec = 0, keyResult = 0
    let keyIncrement = KEY_TABLE[packetBuffer[2] * 2] & 0xFF

    for (var index = 4, len = packetBuffer.length; index < len; index++) {
        checksumDec += packetBuffer[index]
        keyResult = KEY_TABLE[((keyIncrement & 0x800000FF) * 2) + 1]

        switch (index & 3) {
            case 0:
                packetBuffer[index] = (packetBuffer[index] + ((keyResult * 2) & 0xFF)) & 0xFF
                break
            case 1:
                packetBuffer[index] = (packetBuffer[index] - ((keyResult >> 3) & 0xFF)) & 0xFF
                break
            case 2:
                packetBuffer[index] = (packetBuffer[index] + ((keyResult * 4) & 0xFF)) & 0xFF
                break
            case 3:
                packetBuffer[index] = (packetBuffer[index] - ((keyResult >> 5) & 0xFF)) & 0xFF
                break
        }

        checksumEnc += packetBuffer[index]
        keyIncrement += 1
    }

    packetBuffer[3] = (checksumEnc - checksumDec) & 0xFF

    return packetBuffer
}

exports.decrypt = (packetBuffer) => {
    let checksumEnc = 0, checksumDec = 0, keyResult = 0
    let keyIncrement = KEY_TABLE[packetBuffer[2] * 2]

    for (var index = 4, len = packetBuffer.length; index < len; index++) {
        checksumEnc += packetBuffer[index]
        keyResult = KEY_TABLE[((keyIncrement & 0x800000FF) * 2) + 1]

        switch (index & 3) {
            case 0:
                packetBuffer[index] = (packetBuffer[index] - ((keyResult << 1) & 0xFF)) & 0xFF
                break
            case 1:
                packetBuffer[index] = (packetBuffer[index] + ((keyResult >>> 3) & 0xFF)) & 0xFF
                break
            case 2:
                packetBuffer[index] = (packetBuffer[index] - ((keyResult << 2) & 0xFF)) & 0xFF
                break
            case 3:
                packetBuffer[index] = (packetBuffer[index] + ((keyResult >>> 5) & 0xFF)) & 0xFF
                break
        }

        checksumDec += packetBuffer[index]
        keyIncrement += 1
    }

    if (packetBuffer[3] == ((checksumEnc - checksumDec) & 0xFF))
        return packetBuffer
    else
        return null
}

/*let buffer1 = [0x10, 0x00, 0x60, 0x15, 0x75, 0xf3, 0x96, 0xf9, 0x9f, 0xd5, 0xe4, 0x22, 0xba, 0x01, 0xf8, 0x00]
console.log(buffer1.map(x => '0x' + x.toString(16)).toString())
console.log(decrypt(buffer1).map(x => '0x' + x.toString(16)).toString())
console.log(encrypt(buffer1).map(x => '0x' + x.toString(16)).toString())

console.log('\n')

let buffer2 = [0x10, 0x0, 0x60, 0x15, 0x75, 0xF3, 0x96, 0xF9, 0x9F, 0x48, 0xEA, 0x22, 0xBA, 0x1, 0xF8, 0x0]
console.log(buffer2.map(x => '0x' + x.toString(16)).toString())
console.log(decrypt(buffer2).map(x => '0x' + x.toString(16)).toString())
console.log(encrypt(buffer2).map(x => '0x' + x.toString(16)).toString())

console.log('\n')

let buffer3 = [0x14, 0x0, 0x60, 0xB9, 0x70, 0xF4, 0x96, 0xF9, 0x88, 0x40, 0xF5, 0x23, 0x1D, 0xF2, 0xF9, 0x0, 0xC2, 0xF1, 0xF4, 0xFD]
console.log(buffer3.map(x => '0x' + x.toString(16)).toString())
console.log(decrypt(buffer3).map(x => '0x' + x.toString(16)).toString())
console.log(encrypt(buffer3).map(x => '0x' + x.toString(16)).toString())

console.log('\n')

let buffer4 = [0x14, 0x0, 0x60, 0xB9, 0x70, 0xF4, 0x96, 0xF9, 0x46, 0x30, 0x0, 0x23, 0x1D, 0xF1, 0xF9, 0x1, 0xC2, 0xF1, 0xF4, 0xFD]
console.log(buffer4.map(x => '0x' + x.toString(16)).toString())
console.log(decrypt(buffer4).map(x => '0x' + x.toString(16)).toString())
console.log(encrypt(buffer4).map(x => '0x' + x.toString(16)).toString())

console.log('\n')

let buffer5 = [0x14, 0x0, 0x60, 0xB9, 0xDE, 0xF3, 0x96, 0xF9, 0xA7, 0x39, 0x4, 0x23, 0x1C, 0xF1, 0xF8, 0x0, 0xEE, 0x1, 0xF4, 0xFD]
console.log(buffer5.map(x => '0x' + x.toString(16)).toString())
console.log(decrypt(buffer5).map(x => '0x' + x.toString(16)).toString())
console.log(encrypt(buffer5).map(x => '0x' + x.toString(16)).toString())

console.log('\n')

let buffer6 = [0x14, 0x0, 0x76, 0x2, 0xDE, 0xFF, 0xF7, 0x2, 0xE7, 0x4F, 0xF9, 0x4E, 0xFA, 0xF1, 0xF4, 0xFD, 0x52, 0x0, 0x3C, 0xFD]
console.log(buffer6.map(x => '0x' + x.toString(16)).toString())
console.log(decrypt(buffer6).map(x => '0x' + x.toString(16)).toString())
console.log(encrypt(buffer6).map(x => '0x' + x.toString(16)).toString())*/